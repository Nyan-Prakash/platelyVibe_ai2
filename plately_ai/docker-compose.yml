# plately_ai/docker-compose.yml
# Note: 'version' attribute is obsolete with newer Docker Compose versions and can be removed.

services:
  web:
    build: .
    container_name: plately_ai_web
    ports:
      - "8000:8000" # Map host port 8000 to container port 8000 (Uvicorn default)
    volumes:
      # Mount the application code into the container for development (reflects changes)
      # This allows Uvicorn's --reload to work effectively.
      # The Dockerfile sets WORKDIR /app. We assume main.py and sub-packages are in this root.
      - .:/app
      # Persist user uploaded data (e.g., menu JSONs, images for generation)
      # The upload_folder in main.py is project_root/instance/uploads_data
      # So we map a volume to /app/instance in the container.
      - plately_instance_data:/app/instance

    environment:
      # Environment variables can be set here
      - USE_MOCK_IMAGE_GENERATOR=true
      # If IMAGE_GENERATION_API_KEY is needed, it can be set here or via .env file
      # - IMAGE_GENERATION_API_KEY=your_actual_api_key_here

    # To enable Uvicorn's --reload for development through docker-compose:
    # This overrides the Dockerfile's CMD.
    # Using "python -m uvicorn" to mirror the Dockerfile's CMD structure for consistency.
    command: python run.py

    # For secrets like API keys, consider using a .env file (uncomment below):
    # env_file:
    #   - .env

volumes:
  plately_instance_data: # Defines the named volume for persisting instance data (uploads)

# To use this:
# 1. Make sure Docker is installed and running.
# 2. If you use .env file for secrets, create it in the same directory as this docker-compose.yml
#    Example .env file:
#    IMAGE_GENERATION_API_KEY=your_secret_key
#    (The plately_ai.main module now attempts to read IMAGE_GENERATION_API_KEY from os.environ)
# 3. Run `docker-compose build` (or `docker compose build` for newer Docker versions)
# 4. Run `docker-compose up` (or `docker compose up`)
# The application should be accessible at http://localhost:8000
#
# Note on volumes:
# The line `- .:/app` mounts your local project directory into `/app` in the container.
# This is great for development as code changes are reflected immediately because of Uvicorn's --reload.
# For production, you'd typically build an image with the code copied in (as the Dockerfile does)
# and not mount the source code volume this way, and remove the --reload flag from the command.
#
# The `plately_instance_data:/app/instance` volume is for persisting data generated by the app,
# like uploads, ensuring it's not lost when the container stops/restarts.
# The `plately_ai/main.py` configures the upload folder to be `project_root/instance/uploads_data`.
# Inside the container, with WORKDIR /app, this becomes `/app/instance/uploads_data`.
# The volume mapping correctly persists the `/app/instance` directory.
